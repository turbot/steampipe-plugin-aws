#!/usr/bin/env python3

import os
import json
import requests
import subprocess
from jinja2 import Template

# URL for fetching AWS endpoints JSON data
ENDPOINTS_JSON_URL = "https://raw.githubusercontent.com/aws/aws-sdk-go-v2/master/codegen/smithy-aws-go-codegen/src/main/resources/software/amazon/smithy/aws/go/codegen/endpoints.json"

# Define output directories
OUTPUT_DIR = "internal/aws_endpoint_generator"
ENDPOINTS_FILE_PATH = os.path.join(OUTPUT_DIR, "endpoints.json")
GENERATED_GO_FILE = "aws/endpoint_service_ids_gen.go"

# Ensure output directories exist
os.makedirs(OUTPUT_DIR, exist_ok=True)
os.makedirs(os.path.dirname(GENERATED_GO_FILE), exist_ok=True)


def download_file(url, output_path):
    """Downloads a file from the given URL and saves it locally."""
    try:
        response = requests.get(url, stream=True)
        response.raise_for_status()
        
        with open(output_path, "wb") as file:
            for chunk in response.iter_content(chunk_size=8192):
                file.write(chunk)

        print(f"File downloaded successfully: {output_path}")
    except requests.exceptions.RequestException as e:
        print(f"Error downloading file: {e}")
        exit(1)


def extract_unique_service_keys(endpoint_file_path):
    """Extracts unique service keys from the downloaded JSON file."""
    try:
        with open(endpoint_file_path, "r", encoding="utf-8") as file:
            data = json.load(file)

        service_keys = sorted(set(
            key for partition in data.get("partitions", []) for key in partition.get("services", {}).keys()
        ))

        return service_keys
    except Exception as e:
        print(f"Error parsing JSON: {e}")
        exit(1)


def generate_go_file(service_keys, output_file):
    """Generates a Go file with service ID constants using a template."""
    template_str = """// Code generated by awsEndpointGenerator; DO NOT EDIT.

package aws

// Service constants
{% for service in service_keys %}
const AWS_{{ service | replace(".", "_") | replace("-", "_") | upper }}_SERVICE_ID = "{{ service }}"
{% endfor %}
"""


    template = Template(template_str)
    rendered_content = template.render(service_keys=service_keys)

    try:
        with open(output_file, "w", encoding="utf-8") as file:
            file.write(rendered_content)
        print(f"Go file generated: {output_file}")
    except Exception as e:
        print(f"Error writing Go file: {e}")
        exit(1)


def format_go_file(file_path):
    """Formats the generated Go file using gofmt."""
    try:
        subprocess.run(["go", "fmt", file_path], check=True)
        print(f"Formatted {file_path} using gofmt.")
    except subprocess.CalledProcessError as e:
        print(f"Error formatting Go file: {e}")
        exit(1)


def main():
    """Main execution flow."""
    print("Working Directory:", os.getcwd())

    # Step 1: Download the JSON file
    download_file(ENDPOINTS_JSON_URL, ENDPOINTS_FILE_PATH)

    # Step 2: Extract unique service keys
    service_keys = extract_unique_service_keys(ENDPOINTS_FILE_PATH)

    # Step 3: Generate the Go file
    generate_go_file(service_keys, GENERATED_GO_FILE)

    # Step 4: Format the generated Go file
    format_go_file(GENERATED_GO_FILE)


if __name__ == "__main__":
    main()