package aws

import (
	"context"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/kinesis"
	"github.com/turbot/steampipe-plugin-sdk/v4/grpc/proto"
	"github.com/turbot/steampipe-plugin-sdk/v4/plugin"
	"github.com/turbot/steampipe-plugin-sdk/v4/plugin/transform"
)

//// TABLE DEFINITION

func tableAwsKinesisConsumer(_ context.Context) *plugin.Table {
	return &plugin.Table{
		Name:        "aws_kinesis_consumer",
		Description: "AWS Kinesis Consumer",
		Get: &plugin.GetConfig{
			KeyColumns: plugin.SingleColumn("consumer_arn"),
			IgnoreConfig: &plugin.IgnoreConfig{
				ShouldIgnoreErrorFunc: isNotFoundError([]string{"ResourceNotFoundException"}),
			},
			Hydrate: getAwsKinesisConsumer,
		},
		List: &plugin.ListConfig{
			ParentHydrate: listStreams,
			Hydrate:       listKinesisConsumers,
		},
		GetMatrixItemFunc: BuildRegionList,
		Columns: awsRegionalColumns([]*plugin.Column{
			{
				Name:        "consumer_name",
				Description: "The name of the consumer.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "consumer_arn",
				Description: "An ARN generated by Kinesis Data Streams when consumer is registered.",
				Type:        proto.ColumnType_STRING,
				Transform:   transform.FromField("ConsumerARN"),
			},
			{
				Name:        "stream_arn",
				Description: "The ARN of the stream with which you registered the consumer.",
				Type:        proto.ColumnType_STRING,
				Hydrate:     getAwsKinesisConsumer,
				Transform:   transform.FromField("StreamARN"),
			},
			{
				Name:        "consumer_status",
				Description: "The current status of consumer.",
				Type:        proto.ColumnType_STRING,
			},
			{
				Name:        "consumer_creation_timestamp",
				Description: "Timestamp when consumer was created.",
				Type:        proto.ColumnType_TIMESTAMP,
			},
			// Standard columns for all tables
			{
				Name:        "title",
				Description: resourceInterfaceDescription("title"),
				Type:        proto.ColumnType_STRING,
				Transform:   transform.FromField("ConsumerName"),
			},
			{
				Name:        "akas",
				Description: resourceInterfaceDescription("akas"),
				Type:        proto.ColumnType_JSON,
				Transform:   transform.FromField("ConsumerARN").Transform(arnToAkas),
			},
		}),
	}
}

//// LIST FUNCTION

func listKinesisConsumers(ctx context.Context, d *plugin.QueryData, h *plugin.HydrateData) (interface{}, error) {
	streamData := *h.Item.(*kinesis.DescribeStreamOutput)
	region := d.KeyColumnQualString(matrixKeyRegion)

	getCommonColumnsCached := plugin.HydrateFunc(getCommonColumns).WithCache()
	c, err := getCommonColumnsCached(ctx, d, h)
	if err != nil {
		return nil, err
	}

	commonColumnData := c.(*awsCommonColumnData)

	arn := "arn:" + commonColumnData.Partition + ":kinesis:" + region + ":" + commonColumnData.AccountId + ":stream" + "/" + *streamData.StreamDescription.StreamName

	plugin.Logger(ctx).Trace("StreamArn", "arn", arn)

	// Create session
	svc, err := KinesisService(ctx, d)
	if err != nil {
		return nil, err
	}

	input := &kinesis.ListStreamConsumersInput{
		StreamARN:  &arn,
		MaxResults: aws.Int64(100),
	}

	// Reduce the basic request limit down if the user has only requested a small number of rows
	limit := d.QueryContext.Limit
	if d.QueryContext.Limit != nil {
		if *limit < *input.MaxResults {
			if *limit < 1 {
				input.MaxResults = aws.Int64(1)
			} else {
				input.MaxResults = limit
			}
		}
	}

	err = svc.ListStreamConsumersPages(
		input,
		func(page *kinesis.ListStreamConsumersOutput, isLast bool) bool {
			for _, consumerData := range page.Consumers {
				d.StreamLeafListItem(ctx, consumerData)

				// Context may get cancelled due to manual cancellation or if the limit has been reached
				if d.QueryStatus.RowsRemaining(ctx) == 0 {
					return false
				}
			}
			return !isLast
		},
	)

	return nil, err
}

func getAwsKinesisConsumer(ctx context.Context, d *plugin.QueryData, h *plugin.HydrateData) (interface{}, error) {
	logger := plugin.Logger(ctx)
	logger.Trace("getAwsKinesisConsumer")

	var arn string
	if h.Item != nil {
		i := h.Item.(*kinesis.Consumer)
		arn = *i.ConsumerARN
	} else {
		arn = d.KeyColumnQuals["consumer_arn"].GetStringValue()
	}

	// Create Session
	svc, err := KinesisService(ctx, d)
	if err != nil {
		return nil, err
	}

	// Build the params
	params := &kinesis.DescribeStreamConsumerInput{
		ConsumerARN: &arn,
	}

	// Get call
	data, err := svc.DescribeStreamConsumer(params)
	if err != nil {
		logger.Debug("getAwsKinesisConsumer", "ERROR", err)
		return nil, err
	}

	return data.ConsumerDescription, nil
}
